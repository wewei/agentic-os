# Cursor Agent 配置

<!-- 引用共享的项目上下文文件 -->
<!-- 请参考 .github/project-context.md 中的项目配置 -->

## Cursor Agent 特定指导

### 代码生成偏好
- 严格遵循函数式编程风格，避免使用 class 和 interface
- 优先使用 type 定义数据类型
- 函数长度控制在 50 行以内
- 使用 camelCase 命名函数和变量，PascalCase 命名类型
- 生成代码时考虑可读性和可维护性

### 代码审查重点
- 检查函数长度是否超过 50 行
- 验证是否遵循函数式编程原则
- 确认类型定义使用 type 而非 interface
- 检查命名规范是否符合项目标准
- 评估代码的可读性和逻辑清晰度

### 重构建议
- 当函数超过 50 行时，建议进行逻辑提取和拆分
- 优先考虑将复杂逻辑拆分为多个小函数
- 使用函数组合而非继承
- 保持函数的单一职责原则
- 建议使用纯函数，避免副作用

### Agent Bus 架构
- 所有模块通过 Agent Bus 通信
- 能力 ID 格式：`module:action`（如 `task:spawn`, `model:llm`）
- 能力接口：`invoke(abilityId, callId, callerId, input) => Promise<InvokeResult>`
- 使用 Zod 定义输入验证 schema

### 开发工作流
1. 理解需求，确定所属模块
2. 在 types.ts 中定义必要类型
3. 在 abilities.ts 中实现能力
4. 在 index.ts 中注册到 Bus
5. 运行 `bun run lint` 检查代码质量
6. 编写测试验证功能

### 错误处理
- 使用 InvokeResult<T, E> 类型返回结果
- 提供清晰的错误消息
- 捕获并处理异步错误
- 验证输入使用 Zod schema

### 性能考虑
- 避免不必要的异步操作
- 使用流式处理大数据
- 合理使用缓存
- 及时清理资源（如 SSE 连接）

